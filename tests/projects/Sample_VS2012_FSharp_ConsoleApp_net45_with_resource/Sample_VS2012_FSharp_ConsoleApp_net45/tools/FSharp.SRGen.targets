<!--
***********************************************************************************************
FSharp.SRGen.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
		  created a backup copy.  Incorrect changes to this file will make it
		  impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Microsoft Corporation. Apache 2.0 License.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="FsSrGen" AssemblyFile="$(MSBuildThisFileDirectory)FSharp.SRGen.Build.Tasks.dll"/>
  <PropertyGroup>
    <PrepareForBuildDependsOn>ProcessFsSrGen;$(PrepareForBuildDependsOn)</PrepareForBuildDependsOn>
  </PropertyGroup>

  <!-- Build FsSrGen files. -->
  <Target
		Name="CallFsSrGen"
		Inputs="@(FsSrGen)"
		Outputs="@(FsSrGen->'$(IntermediateOutputPath)%(Filename).fs');@(FsSrGen->'$(IntermediateOutputPath)%(Filename).resx')"
		Condition="'@(FsSrGen)'!=''">
    <!-- Create the output directory in case it doesn't exist yet -->
    <MakeDir Directories="$(IntermediateOutputPath)"/>
    <!-- Run the tool -->
    <FsSrGen
      InputFile="%(FsSrGen.FullPath)"
      ToolPath="$(FsSrGenToolPath)"
      OutputFsFile="$(IntermediateOutputPath)%(FsSrGen.Filename).fs"
      OutputResxFile="$(IntermediateOutputPath)%(FsSrGen.Filename).resx"
      >
    </FsSrGen>
  </Target>

  <!-- Process FsSrGen rules. No 'Inputs' and 'Outputs' means this rule always runs if there is any @FsSrGen, even if up-to-date. -->
  <Target
		Name="ProcessFsSrGen"
                DependsOnTargets="CallFsSrGen"
		Condition="'@(FsSrGen)'!=''">
    <!-- Make the outputs magically part of the project -->
    <CreateItem Include="$(IntermediateOutputPath)%(FsSrGen.Filename).fs">
      <Output TaskParameter="Include" ItemName="CompileBefore"/>
    </CreateItem>
    <CreateItem Include="$(IntermediateOutputPath)%(FsSrGen.Filename).resx"
                AdditionalMetadata="ManifestResourceName=%(FsSrGen.Filename)">
      <!-- Note AdditionalMetadata above; we need the name in the manifest to be Foo.resources and not e.g. obj.Debug.Foo.resources -->
      <Output TaskParameter="Include" ItemName="EmbeddedResource"/>
    </CreateItem>
    <!-- Add them to the list of things under the IntermediateOutputPath that should be 'clean'ed -->
    <CreateItem Include="$(IntermediateOutputPath)%(FsSrGen.Filename).fs">
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>
    <CreateItem Include="$(IntermediateOutputPath)%(FsSrGen.Filename).resx">
      <Output TaskParameter="Include" ItemName="FileWrites"/>
    </CreateItem>
  </Target>

  <ItemGroup>
    <AvailableItemName Include="FsSrGen">
      <Visible>false</Visible>
    </AvailableItemName>
  </ItemGroup>
</Project>