<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Microsoft Corporation.  All Rights Reserved.  See License.txt in the project root for license information. -->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- If Configuration is empty that means we are not being built in VS and so folks need to explicitly pass the different
      values for $(ConfigurationGroup), $(TargetGroup), or $(OSGroup) or accept the defaults for them.
  -->
  <PropertyGroup Condition="'$(Configuration)'==''">
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'==''">Debug</ConfigurationGroup>
    <Configuration>$(ConfigurationGroup)</Configuration>
    <Configuration Condition="'$(TargetGroup)'!=''">$(TargetGroup)_$(Configuration)</Configuration>
    <Configuration Condition="'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'">$(OSGroup)_$(Configuration)</Configuration>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'!=''">
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'=='' and $(Configuration.ToLower().EndsWith('debug'))">Debug</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'=='' and $(Configuration.ToLower().EndsWith('release'))">Release</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'==''">Debug</ConfigurationGroup>
  </PropertyGroup>

  <!-- Version number computation -->
  <PropertyGroup>
    <FSCoreVersion>4.5.0.0</FSCoreVersion>
    <FSCoreMajorVersion>4.5</FSCoreMajorVersion>
    <FSCorePackageVersion>4.5.3</FSCorePackageVersion>
    <FSProductVersion>10.2.3.0</FSProductVersion>
    <FSPackageVersion>10.2.3</FSPackageVersion>
    <FSPackageMajorVersion>10.2</FSPackageMajorVersion>
    <VSAssemblyVersion>15.7.0.0</VSAssemblyVersion>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Put build number 0 and today's date if this was a local build -->
    <BUILD_BUILDNUMBER Condition="'$(BUILD_BUILDNUMBER)' == ''">$([System.DateTime]::Now.ToString(yyyyMMdd.0))</BUILD_BUILDNUMBER>

    <!--
    Given $(BUILD_BUILDNUMBER) = '20161225.1'

    Then $(_Build_Year) = 2016
    Then $(_Build_Month) = 12
    Then $(_Build_Day) = 25
    Then $(_Build_Number) = 1
    Then $(Build_FileVersion) = 2016.12.25.1
    -->
    <_Build_Year>$(BUILD_BUILDNUMBER.Substring(0, 4))</_Build_Year>
    <_Build_Month>$(BUILD_BUILDNUMBER.Substring(4, 2))</_Build_Month>
    <_Build_Day>$(BUILD_BUILDNUMBER.Substring(6, 2))</_Build_Day>
    <_Build_Number>$(BUILD_BUILDNUMBER.Substring(9))</_Build_Number>
    <Build_FileVersion>$(_Build_Year).$(_Build_Month).$(_Build_Day).$(_Build_Number)</Build_FileVersion>

    <MicroBuildAssemblyVersion Condition="'$(MicroBuildAssemblyVersion)' == ''">$(FSCoreVersion)</MicroBuildAssemblyVersion>

    <!-- certain delivered F# VS assemblies use a specific MicroBuildAssemblyVersion, otherwise use FSCoreVersion --> 
    <MicroBuildAssemblyVersion Condition="'$(UseFSharpProductVersion)' == 'true'">$(FSProductVersion)</MicroBuildAssemblyVersion> 

    <!-- certain delivered F# VS assemblies use a specific MicroBuildAssemblyVersion, otherwise use FSCoreVersion --> 
    <MicroBuildAssemblyVersion Condition="'$(UseVsMicroBuildAssemblyVersion)' == 'true'">$(VSAssemblyVersion)</MicroBuildAssemblyVersion> 

    <!--

    Given $(BUILD_BUILDNUMBER) = '20161225.1'
    Given $(MicroBuildAssemblyVersion) = '15.4.1.0'

    Then $(BuildTimeStamp_Date) = 161225
    Then $(BuildTimeStamp_Number) = 01
    Then $(BuildTimeStamp) = 16122501
    Then $(MicroBuildAssemblyVersion_WithoutRevision) = 15.4.1
    Then $(VsixPackageVersion) = 15.4.1.16122501
    Then $(NuGetPackageVersionSuffix) = 161225-01

    -->
    <BuildTimeStamp_Date>$(BUILD_BUILDNUMBER.Split('.')[0].Substring(2))</BuildTimeStamp_Date>
    <BuildTimeStamp_Number>$(BUILD_BUILDNUMBER.Split('.')[1].PadLeft(2, '0'))</BuildTimeStamp_Number>
    <BuildTimeStamp>$(BuildTimeStamp_Date)$(BuildTimeStamp_Number)</BuildTimeStamp>
    <MicroBuildAssemblyVersion_WithoutRevision>$(MicroBuildAssemblyVersion.Substring(0, $(MicroBuildAssemblyVersion.LastIndexOf('.'))))</MicroBuildAssemblyVersion_WithoutRevision>
    <VsixPackageVersion>$(MicroBuildAssemblyVersion_WithoutRevision).$(BuildTimeStamp)</VsixPackageVersion>
    <NuGetPackageVersionSuffix>$(BuildTimeStamp_Date)-$(BuildTimeStamp_Number)</NuGetPackageVersionSuffix>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Settings used all the time -->
    <Tailcalls>true</Tailcalls>
    <TargetDotnetProfile Condition="'$(TargetDotnetProfile)'==''">net40</TargetDotnetProfile>

    <!-- Currently always use .NET Framwork proto compiler -->
    <ProtoFlavour Condition="'$(ProtoFlavour)' == ''">net40</ProtoFlavour>
    <ProjectLanguage Condition="'$(ProjectLanguage)' == ''">FSharp</ProjectLanguage>
    <DebugSymbols>true</DebugSymbols>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <BuildToolsTargets45>true</BuildToolsTargets45>
    <WarningsAsErrors />

    <RoslynVSPackagesVersion>15.0.26201</RoslynVSPackagesVersion>
    <SystemCollectionsImmutableVersion>1.5.0</SystemCollectionsImmutableVersion>
    <VSSDK_BUILDTOOLS_VERSION>Microsoft.VSSDK.BuildTools.15.1.192</VSSDK_BUILDTOOLS_VERSION>

    <MicrosoftVisualStudioThreadingVersion>15.3.23</MicrosoftVisualStudioThreadingVersion>
    <MicrosoftVisualStudioValidationVersion>15.3.15</MicrosoftVisualStudioValidationVersion>

    <!-- Always qualify the IntermediateOutputPath by the TargetDotnetProfile if any exists -->
    <IntermediateOutputPath>obj\$(Configuration)\$(TargetDotnetProfile)\</IntermediateOutputPath>
    <IntermediateOutputPath Condition="'$(PortableProfileBeingReferenced)' != ''">obj\$(Configuration)\$(TargetDotnetProfile)\$(PortableProfileBeingReferenced)\</IntermediateOutputPath>

    <!-- Always qualify the IntermediateOutputPath by the TargetDotnetProfile if any exists -->
    <IntermediateOutputPath>obj\$(Configuration)\$(TargetDotnetProfile)\</IntermediateOutputPath>
    <IntermediateOutputPath Condition="'$(PortableProfileBeingReferenced)' != ''">obj\$(Configuration)\$(TargetDotnetProfile)\$(PortableProfileBeingReferenced)\</IntermediateOutputPath>

    <MonoPackaging>true</MonoPackaging>

    <!-- Frozen FSharp.Core package -->
    <FSharpCoreFrozenPortablePackageVersion>10.1.0</FSharpCoreFrozenPortablePackageVersion>
    <FSharpCoreFrozenPortableTargetPackageVersion>10.2.0</FSharpCoreFrozenPortableTargetPackageVersion>
    <FSharpCoreFrozenPortableTargetMajorVersion>10.2</FSharpCoreFrozenPortableTargetMajorVersion>

    <!-- Nunit -->
    <NUnitVersion>3.5.0</NUnitVersion>
    <NUnitFullVersion>3.5.0.0</NUnitFullVersion>
    <NUnitLibDir>$(FSharpSourcesRoot)\..\packages\NUnit.$(NUnitVersion)\lib\net45</NUnitLibDir>

    <MonoPackaging Condition="'$(TargetDotnetProfile)' != 'coreclr' AND '$(OS)' == 'Unix'">true</MonoPackaging>

    <DependencyUptakePackageVersionPropsFile>$(MSBuildThisFileDirectory)..\Tools\dependencyUptake\PackageVersions.props</DependencyUptakePackageVersionPropsFile>

    <!-- Localization -->
    <DisableLocalization Condition="'$(MonoPackaging)' == 'true'">true</DisableLocalization>
    <UpdateXlfOnBuild Condition="'$(CI)' != '1'">true</UpdateXlfOnBuild>
    <XliffTasksVersion>0.2.0-beta-000081</XliffTasksVersion>

  </PropertyGroup>

  <Import Project="$(DependencyUptakePackageVersionPropsFile)" Condition="Exists('$(DependencyUptakePackageVersionPropsFile)')" />

  <!-- Default setting. Some get modified later in FSharpSource.targets -->
  <PropertyGroup>
    <SkipSigning>false</SkipSigning>
    <UseOpenSourceSign>true</UseOpenSourceSign>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(FSharpSourcesRoot)\fsharp\msft.pubkey</AssemblyOriginatorKeyFile>
    <StrongNames>true</StrongNames>
    <DelaySign>true</DelaySign>
  </PropertyGroup>

  <!-- On windows, VS packaging -->
  <PropertyGroup Condition="'$(MonoPackaging)' != 'true' AND '$(OS)' != 'Unix'">
    <UseMicroBuild>true</UseMicroBuild> 
    <UseSourceLink Condition = " '$(UseSourceLink)' == '' AND '$(Configuration)'=='Release' ">false</UseSourceLink>
    <UseGatherBinaries>true</UseGatherBinaries>
    <VsSDKInstall Condition=" '$(VsSDKInstall)' == '' ">$(MSBuildThisFileDirectory)..\packages\$(VSSDK_BUILDTOOLS_VERSION)\tools\vssdk</VsSDKInstall>
    <VsSDKToolPath Condition=" '$(VsSDKToolPath)' == '' ">$(MSBuildThisFileDirectory)..\packages\$(VSSDK_BUILDTOOLS_VERSION)\tools\vssdk\bin</VsSDKToolPath>
    <VsSDKTargets Condition=" '$(VsSDKTargets)' == '' ">$(MSBuildThisFileDirectory)..\packages\$(VSSDK_BUILDTOOLS_VERSION)\tools\vssdk\Microsoft.VsSDK.targets</VsSDKTargets>
    <VsSDKIncludes Condition=" '$(VsSDKIncludes)' == '' ">$(MSBuildThisFileDirectory)..\packages\$(VSSDK_BUILDTOOLS_VERSION)\tools\vssdk\inc</VsSDKIncludes>
    <VsixSchemaPath Condition=" '$(VsixSchemaPath)' == '' ">$(MSBuildThisFileDirectory)..\packages\$(VSSDK_BUILDTOOLS_VERSION)\tools\vssdk\schemas\VSIXManifestSchema.xsd</VsixSchemaPath>
  </PropertyGroup>

	<PropertyGroup Condition=" '$(ProjectLanguage)' == 'FSharp' ">
    <!-- Things we do only for F# projects -->
    <OtherFlags>$(OtherFlags) --times</OtherFlags>
    <NoWarn>$(NoWarn);69;65;54;61;75</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <!-- Settings for Debug mode        -->
    <DebugType>full</DebugType>
    <DebugType Condition="'$(OS)' == 'Unix'">portable</DebugType> <!-- no longer use MDB on Mono --> 

    <Optimize Condition=" '$(Optimize)' == '' ">false</Optimize>
    <ErrorReport Condition=" '$(ErrorReport)' == '' ">prompt</ErrorReport>
    <OtherFlags>$(OtherFlags) --no-jit-optimize</OtherFlags>
    <EmbedAllSource Condition=" '$(DebugType)' == 'portable' or '$(DebugType)' == 'embedded' ">true</EmbedAllSource>
    <DefineConstants Condition=" '$(ProjectLanguage)' != 'VisualBasic' ">DEBUG;TRACE;CODE_ANALYSIS;$(DefineConstants)</DefineConstants>
    <DefineConstants Condition=" '$(ProjectLanguage)' == 'VisualBasic' ">DEBUG=True,TRACE=True,CODE_ANALYSIS=True,$(DefineConstants)</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <!-- Flags used for Release mode.		-->
    <DebugType>pdbonly</DebugType>
    <DebugType Condition="'$(OS)' == 'Unix'">portable</DebugType> <!-- no longer use MDB on Mono --> 

    <Optimize Condition=" '$(Optimize)' == '' ">true</Optimize>
    <EmbedAllSource>false</EmbedAllSource>
    <ErrorReport Condition=" '$(ErrorReport)' == '' ">prompt</ErrorReport>
    <DefineConstants Condition=" '$(ProjectLanguage)' != 'VisualBasic' ">TRACE;$(DefineConstants)</DefineConstants>
    <DefineConstants Condition=" '$(ProjectLanguage)' == 'VisualBasic' ">TRACE=True,$(DefineConstants)</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Proto'">
    <!-- Flags used when running the Proto compiler.		-->
    <DebugType Condition=" '$(DebugType)' == '' ">full</DebugType>
    <DebugType Condition="'$(OS)' == 'Unix'">portable</DebugType> <!-- no longer use MDB on Mono --> 
    <Optimize>true</Optimize>
    <DefineConstants>DEBUG;NO_STRONG_NAMES;$(DefineConstants)</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Standard defaults for output path and warning level -->
    <OutputPath Condition="'$(OutputPath)' == ''">bin\$(Configuration)</OutputPath>
    <WarningLevel Condition=" '$(WarningLevel)' == '' ">3</WarningLevel>
  </PropertyGroup>

  <!-- Nuget Package properties -->
  <PropertyGroup>
    <BuildRevision>$([System.DateTime]::Now.ToString(`yyMMdd`))</BuildRevision>
    <NuGetReleaseVersion>1.0.0</NuGetReleaseVersion>
    <NuGetPreReleaseVersion>$(NuGetReleaseVersion)-rc</NuGetPreReleaseVersion>
    <NuGetPerBuildPreReleaseVersion Condition="'$(BuildRevision)' != ''">$(NuGetPreReleaseVersion)-$(BuildRevision.Trim())</NuGetPerBuildPreReleaseVersion>
    <NUGET_PACKAGES Condition=" '$(NUGET_PACKAGES)' == '' ">$(MSBuildThisFileDirectory)..\packages</NUGET_PACKAGES>
    <RestorePackagesPath>$(NUGET_PACKAGES)</RestorePackagesPath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Compiler tool locations.		-->
    <FsLexToolPath>$(FSharpSourcesRoot)\..\packages\FsLexYacc.7.0.6\build</FsLexToolPath>
    <FsYaccToolPath>$(FSharpSourcesRoot)\..\packages\FsLexYacc.7.0.6\build</FsYaccToolPath>
    <FsiToolExe>fsi.exe</FsiToolExe>
    <FsLexToolExe>fslex.exe</FsLexToolExe>
    <FsYaccToolExe>fsyacc.exe</FsYaccToolExe>

    <!-- FSharp.Compiler.Tools is currently only used to get a working FSI.EXE to execute some scripts during the build -->
    <!-- The LKG FSI.EXE requires MSBuild 15 to be installed, which is painful -->
    <FsiToolPath>$(FSharpSourcesRoot)\..\packages\FSharp.Compiler.Tools.4.1.27\tools</FsiToolPath>


    <!-- The version of MSBuild assumed byt the F# compiler in the Mono packaging of F# -->
    <MonoPackagingMSBuildVersionFull>14.0.0.0</MonoPackagingMSBuildVersionFull>	  

  </PropertyGroup>

<!--
  <Import Project="$(MSBuildThisFileDirectory)..\packages\XliffTasks.$(XliffTasksVersion)\build\XliffTasks.props" Condition="'$(DisableLocalization)' != 'true'" />

  <PropertyGroup>
    <XlfLanguages>en;$(XlfLanguages)</XlfLanguages>
  </PropertyGroup>

  <Import Project="$(RestorePackagesPath)\XliffTasks.$(XliffTasksVersion)\build\XliffTasks.targets" Condition="'$(DisableLocalization)' != 'true'" />
  <Import Project="../Tools/Build.Common.props" Condition="'$(TargetDotnetProfile)'=='coreclr'"/>
  <Import Project="$(BuildVersionFilePath)"     Condition="Exists('$(BuildVersionFilePath)')" />
-->

</Project>
